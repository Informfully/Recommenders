import unittest
import numpy as np
from cornac.datasets import movielens
from cornac.data import Reader
from cornac.eval_methods import RatioSplit, BaseMethod
import pandas as pd
import json
import cornac
from cornac.experiment.experiment import Experiment
from cornac.models import UserKNN
from cornac.rerankers import reranker
from cornac.rerankers.least_pop import LeastPopReranker


class TestRerank(unittest.TestCase):
    def setUp(self):
        self.K = 50  # number of nearest neighbors
        # Load ML-100K dataset
        self.feedback = movielens.load_feedback(variant="100K")
        # Define an evaluation method to split feedback into train and test sets

    def test_rerank_with_dummyData(self):
        data1 = [('u0', 'item0', 3.0),
                 ('u1', 'item1', 1.0),
                 ('u2', 'item0', 2.0),
                 ('u3', 'item1', 4.0),
                 ('u4', 'item1', 2.0),
                 ('u5', 'item2', 5.0),
                 ('u2', 'item3', 2.0),
                 ('u5', 'item3', 3.0),
                 ('u3', 'item2', 3.0),
                 ('u0', 'item4', 3.0),
                 ('u2', 'item2', 3.0),
                 ('u4', 'item3', 3.0),
                 ('u5', 'item2', 3.0)]
        ratio_split = RatioSplit.from_splits(data=data1,
                                             train_data=data1[:-
                                                              3], test_data=data1[-3:],
                                             exclude_unknowns=True, verbose=True, seed=123, rating_threshold=1)

        # dummy data
        test_item_ids_list = [0, 1, 2, 3, 4]
        itemscores = np.ones(len(test_item_ids_list))
        # dummy ranked list generated by initial recommender model
        ranked_items = [2, 3, 0, 4, 1]
        itemscores = itemscores.tolist()
        reranker = LeastPopReranker(top_k=3, pool_size=5)

        items = reranker.rerank(
            user_idx=2, interaction_history=ratio_split.train_set, candidate_items=ranked_items, prediction_scores=itemscores)

        expected_list = [4, 2, 1]
        self.assertListEqual(items, expected_list)

        items = reranker.rerank(
            user_idx=5, interaction_history=ratio_split.train_set, candidate_items=ranked_items, prediction_scores=itemscores)

        expected_list = [4, 0, 1]
        self.assertListEqual(items, expected_list)

        # popularity score function
        popularity = reranker.popularityScores([0, 1, 2, 3, 4])
        expected_popularity = [2, 3, 2, 2, 1]
        self.assertListEqual(popularity.tolist(), expected_popularity)

    def test_rerank_with_movielens(self):
        ratio_split = RatioSplit(data=self.feedback, test_size=0.2, exclude_unknowns=True, verbose=True, seed=123
                                 )
        user_knn_cosine = UserKNN(
            k=self.K, similarity="cosine", name="UserKNN-Cosine")
        Experiment(eval_method=ratio_split,
                   models=[
                       user_knn_cosine,
                   ],
                   metrics=[cornac.metrics.RMSE()],
                   user_based=True,
                   ).run()
        reranker = LeastPopReranker(top_k=20, pool_size=200)

        # values_list = list(ratio_split.test_set.item_indices)
        item_indices = list(ratio_split.test_set.uir_tuple[1])
        item_ids, itemscores = user_knn_cosine.rank(
            1, item_indices)
        item_ids = item_ids.tolist()
        itemscores = itemscores.tolist()

        items = reranker.rerank(
            user_idx=1, interaction_history=ratio_split.train_set, candidate_items=item_ids,
            prediction_scores=itemscores)


if __name__ == '__main__':
    unittest.main()
